<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Dub;



/** Dub - Dub API: Dub is link management infrastructure for companies to create marketing campaigns, link sharing features, and referral programs. */
class Dub
{
    public const SERVERS = [
        /** Production API */
        'https://api.dub.co',
    ];

    public Links $links;

    public Analytics $analytics;

    public Events $events;

    public Tags $tags;

    public Folders $folders;

    public Domains $domains;

    public Track $track;

    public Customers $customers;

    public Partners $partners;

    public Commissions $commissions;

    public Workspaces $workspaces;

    public EmbedTokens $embedTokens;

    public QRCodes $qrCodes;

    /**
     * Returns a new instance of the SDK builder used to configure and create the SDK instance.
     *
     * @return DubBuilder
     */
    public static function builder(): DubBuilder
    {
        return new DubBuilder();
    }

    /**
     * @param  SDKConfiguration  $sdkConfiguration
     */
    public function __construct(
        public SDKConfiguration $sdkConfiguration,
    ) {
        $this->links = new Links($this->sdkConfiguration);
        $this->analytics = new Analytics($this->sdkConfiguration);
        $this->events = new Events($this->sdkConfiguration);
        $this->tags = new Tags($this->sdkConfiguration);
        $this->folders = new Folders($this->sdkConfiguration);
        $this->domains = new Domains($this->sdkConfiguration);
        $this->track = new Track($this->sdkConfiguration);
        $this->customers = new Customers($this->sdkConfiguration);
        $this->partners = new Partners($this->sdkConfiguration);
        $this->commissions = new Commissions($this->sdkConfiguration);
        $this->workspaces = new Workspaces($this->sdkConfiguration);
        $this->embedTokens = new EmbedTokens($this->sdkConfiguration);
        $this->qrCodes = new QRCodes($this->sdkConfiguration);
        $this->initHooks();

    }

    private function initHooks(): void
    {
        $preHooksUrl = $this->sdkConfiguration->getTemplatedServerUrl();
        $ret = $this->sdkConfiguration->hooks->sdkInit($preHooksUrl, $this->sdkConfiguration->client);
        if ($preHooksUrl != $ret->url) {
            $this->sdkConfiguration->serverUrl = $ret->url;
        }
        $this->sdkConfiguration->client = $ret->client;
    }
}