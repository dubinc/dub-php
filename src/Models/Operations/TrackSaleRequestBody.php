<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Dub\Models\Operations;


class TrackSaleRequestBody
{
    /**
     * The unique ID of the customer in your system. Will be used to identify and attribute all future events to this customer.
     *
     * @var string $customerExternalId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('customerExternalId')]
    public string $customerExternalId;

    /**
     * The amount of the sale in cents (for all two-decimal currencies). If the sale is in a zero-decimal currency, pass the full integer value (e.g. `1437` JPY). Learn more: https://d.to/currency
     *
     * @var int $amount
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('amount')]
    public int $amount;

    /**
     * The payment processor via which the sale was made.
     *
     * @var PaymentProcessor $paymentProcessor
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('paymentProcessor')]
    #[\Speakeasy\Serializer\Annotation\Type('\Dub\Models\Operations\PaymentProcessor')]
    public PaymentProcessor $paymentProcessor;

    /**
     * Additional metadata to be stored with the sale event. Max 10,000 characters when stringified.
     *
     * @var ?array<string, mixed> $metadata
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('metadata')]
    #[\Speakeasy\Serializer\Annotation\Type('array<string, mixed>|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?array $metadata = null;

    /**
     * The currency of the sale. Accepts ISO 4217 currency codes. Sales will be automatically converted and stored as USD at the latest exchange rates. Learn more: https://d.to/currency
     *
     * @var ?string $currency
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('currency')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $currency = null;

    /**
     * The name of the sale event. Recommended format: `Invoice paid` or `Subscription created`.
     *
     * @var ?string $eventName
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('eventName')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $eventName = null;

    /**
     * The invoice ID of the sale. Can be used as a idempotency key â€“ only one sale event can be recorded for a given invoice ID.
     *
     * @var ?string $invoiceId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('invoiceId')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $invoiceId = null;

    /**
     * The name of the lead event that occurred before the sale (case-sensitive). This is used to associate the sale event with a particular lead event (instead of the latest lead event for a link-customer combination, which is the default behavior).
     *
     * @var ?string $leadEventName
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('leadEventName')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $leadEventName = null;

    /**
     * @param  string  $customerExternalId
     * @param  int  $amount
     * @param  PaymentProcessor  $paymentProcessor
     * @param  ?string  $currency
     * @param  ?string  $eventName
     * @param  ?string  $invoiceId
     * @param  ?string  $leadEventName
     * @param  ?array<string, mixed>  $metadata
     * @phpstan-pure
     */
    public function __construct(string $customerExternalId, int $amount, PaymentProcessor $paymentProcessor, ?array $metadata = null, ?string $currency = 'usd', ?string $eventName = 'Purchase', ?string $invoiceId = null, ?string $leadEventName = null)
    {
        $this->customerExternalId = $customerExternalId;
        $this->amount = $amount;
        $this->paymentProcessor = $paymentProcessor;
        $this->metadata = $metadata;
        $this->currency = $currency;
        $this->eventName = $eventName;
        $this->invoiceId = $invoiceId;
        $this->leadEventName = $leadEventName;
    }
}