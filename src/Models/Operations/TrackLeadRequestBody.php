<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Dub\Models\Operations;


class TrackLeadRequestBody
{
    /**
     * The unique ID of the click that the lead conversion event is attributed to. You can read this value from `dub_id` cookie. If an empty string is provided, Dub will try to find an existing customer with the provided `customerExternalId` and use the `clickId` from the customer if found.
     *
     * @var string $clickId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('clickId')]
    public string $clickId;

    /**
     * The name of the lead event to track. Can also be used as a unique identifier to associate a given lead event for a customer for a subsequent sale event (via the `leadEventName` prop in `/track/sale`).
     *
     * @var string $eventName
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('eventName')]
    public string $eventName;

    /**
     * The unique ID of the customer in your system. Will be used to identify and attribute all future events to this customer.
     *
     * @var string $customerExternalId
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('customerExternalId')]
    public string $customerExternalId;

    /**
     * The numerical value associated with this lead event (e.g., number of provisioned seats in a free trial). If defined as N, the lead event will be tracked N times.
     *
     * @var ?float $eventQuantity
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('eventQuantity')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?float $eventQuantity = null;

    /**
     * Additional metadata to be stored with the lead event. Max 10,000 characters.
     *
     * @var ?array<string, mixed> $metadata
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('metadata')]
    #[\Speakeasy\Serializer\Annotation\Type('array<string, mixed>|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?array $metadata = null;

    /**
     * The mode to use for tracking the lead event. `async` will not block the request; `wait` will block the request until the lead event is fully recorded in Dub; `deferred` will defer the lead event creation to a subsequent request.
     *
     * @var ?Mode $mode
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('mode')]
    #[\Speakeasy\Serializer\Annotation\Type('\Dub\Models\Operations\Mode|null')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?Mode $mode = null;

    /**
     * The name of the customer. If not passed, a random name will be generated (e.g. “Big Red Caribou”).
     *
     * @var ?string $customerName
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('customerName')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $customerName = null;

    /**
     * The email address of the customer.
     *
     * @var ?string $customerEmail
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('customerEmail')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $customerEmail = null;

    /**
     * The avatar URL of the customer.
     *
     * @var ?string $customerAvatar
     */
    #[\Speakeasy\Serializer\Annotation\SerializedName('customerAvatar')]
    #[\Speakeasy\Serializer\Annotation\SkipWhenNull]
    public ?string $customerAvatar = null;

    /**
     * @param  string  $clickId
     * @param  string  $eventName
     * @param  string  $customerExternalId
     * @param  ?Mode  $mode
     * @param  ?string  $customerName
     * @param  ?string  $customerEmail
     * @param  ?string  $customerAvatar
     * @param  ?float  $eventQuantity
     * @param  ?array<string, mixed>  $metadata
     * @phpstan-pure
     */
    public function __construct(string $clickId, string $eventName, string $customerExternalId, ?float $eventQuantity = null, ?array $metadata = null, ?Mode $mode = Mode::Async, ?string $customerName = null, ?string $customerEmail = null, ?string $customerAvatar = null)
    {
        $this->clickId = $clickId;
        $this->eventName = $eventName;
        $this->customerExternalId = $customerExternalId;
        $this->eventQuantity = $eventQuantity;
        $this->metadata = $metadata;
        $this->mode = $mode;
        $this->customerName = $customerName;
        $this->customerEmail = $customerEmail;
        $this->customerAvatar = $customerAvatar;
    }
}