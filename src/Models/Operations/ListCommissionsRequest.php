<?php

/**
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Dub\Models\Operations;

use Dub\Utils\SpeakeasyMetadata;
class ListCommissionsRequest
{
    /**
     *
     * @var ?Type $type
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=type')]
    public ?Type $type = null;

    /**
     * Filter the list of commissions by the associated customer.
     *
     * @var ?string $customerId
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=customerId')]
    public ?string $customerId = null;

    /**
     * Filter the list of commissions by the associated payout.
     *
     * @var ?string $payoutId
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=payoutId')]
    public ?string $payoutId = null;

    /**
     * Filter the list of commissions by the associated partner. When specified, takes precedence over `tenantId`.
     *
     * @var ?string $partnerId
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=partnerId')]
    public ?string $partnerId = null;

    /**
     * Filter the list of commissions by the associated partner's `tenantId` (their unique ID within your database).
     *
     * @var ?string $tenantId
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=tenantId')]
    public ?string $tenantId = null;

    /**
     * Filter the list of commissions by the associated partner group.
     *
     * @var ?string $groupId
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=groupId')]
    public ?string $groupId = null;

    /**
     * Filter the list of commissions by the associated invoice. Since invoiceId is unique on a per-program basis, this will only return one commission per invoice.
     *
     * @var ?string $invoiceId
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=invoiceId')]
    public ?string $invoiceId = null;

    /**
     * Filter the list of commissions by their corresponding status.
     *
     * @var ?QueryParamStatus $status
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=status')]
    public ?QueryParamStatus $status = null;

    /**
     * The start date of the date range to filter the commissions by.
     *
     * @var ?string $start
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=start')]
    public ?string $start = null;

    /**
     * The end date of the date range to filter the commissions by.
     *
     * @var ?string $end
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=end')]
    public ?string $end = null;

    /**
     * The field to sort the list of commissions by.
     *
     * @var ?ListCommissionsQueryParamSortBy $sortBy
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=sortBy')]
    public ?ListCommissionsQueryParamSortBy $sortBy = null;

    /**
     * The sort order for the list of commissions.
     *
     * @var ?ListCommissionsQueryParamSortOrder $sortOrder
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=sortOrder')]
    public ?ListCommissionsQueryParamSortOrder $sortOrder = null;

    /**
     * The interval to retrieve commissions for.
     *
     * @var ?ListCommissionsQueryParamInterval $interval
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=interval')]
    public ?ListCommissionsQueryParamInterval $interval = null;

    /**
     * The page number for pagination.
     *
     * @var ?float $page
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=page')]
    public ?float $page = null;

    /**
     * The number of items per page.
     *
     * @var ?float $pageSize
     */
    #[SpeakeasyMetadata('queryParam:style=form,explode=true,name=pageSize')]
    public ?float $pageSize = null;

    /**
     * @param  ?Type  $type
     * @param  ?string  $customerId
     * @param  ?string  $payoutId
     * @param  ?string  $partnerId
     * @param  ?string  $tenantId
     * @param  ?string  $groupId
     * @param  ?string  $invoiceId
     * @param  ?QueryParamStatus  $status
     * @param  ?ListCommissionsQueryParamSortBy  $sortBy
     * @param  ?ListCommissionsQueryParamSortOrder  $sortOrder
     * @param  ?ListCommissionsQueryParamInterval  $interval
     * @param  ?string  $start
     * @param  ?string  $end
     * @param  ?float  $page
     * @param  ?float  $pageSize
     * @phpstan-pure
     */
    public function __construct(?Type $type = null, ?string $customerId = null, ?string $payoutId = null, ?string $partnerId = null, ?string $tenantId = null, ?string $groupId = null, ?string $invoiceId = null, ?QueryParamStatus $status = null, ?string $start = null, ?string $end = null, ?ListCommissionsQueryParamSortBy $sortBy = ListCommissionsQueryParamSortBy::CreatedAt, ?ListCommissionsQueryParamSortOrder $sortOrder = ListCommissionsQueryParamSortOrder::Desc, ?ListCommissionsQueryParamInterval $interval = ListCommissionsQueryParamInterval::All, ?float $page = 1, ?float $pageSize = 100)
    {
        $this->type = $type;
        $this->customerId = $customerId;
        $this->payoutId = $payoutId;
        $this->partnerId = $partnerId;
        $this->tenantId = $tenantId;
        $this->groupId = $groupId;
        $this->invoiceId = $invoiceId;
        $this->status = $status;
        $this->start = $start;
        $this->end = $end;
        $this->sortBy = $sortBy;
        $this->sortOrder = $sortOrder;
        $this->interval = $interval;
        $this->page = $page;
        $this->pageSize = $pageSize;
    }
}